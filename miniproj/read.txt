| **Data Type/Structure**  | **Method**               | **Description**                                                                 | **Example**                                                                |
|--------------------------|--------------------------|---------------------------------------------------------------------------------|----------------------------------------------------------------------------|
| **int**                  | `bit_length()`           | Returns the number of bits required to represent the integer in binary.         | `x = 5; x.bit_length()` → `3`                                              |
|                          | `to_bytes()`             | Returns an array of bytes representing the integer.                             | `x = 1024; x.to_bytes(2, byteorder='big')` → `b'\x04\x00'`                 |
| **float**                | `is_integer()`           | Returns `True` if the float is an integer.                                      | `x = 5.0; x.is_integer()` → `True`                                         |
|                          | `hex()`                  | Returns a hexadecimal string representation of the float.                       | `x = 3.5; x.hex()` → `'0x1.c000000000000p+1'`                              |
| **str**                  | `upper()`                | Converts the string to uppercase.                                               | `"hello".upper()` → `"HELLO"`                                              |
|                          | `lower()`                | Converts the string to lowercase.                                               | `"HELLO".lower()` → `"hello"`                                              |
|                          | `strip()`                | Removes leading and trailing whitespace.                                        | `"  hello  ".strip()` → `"hello"`                                          |
|                          | `split()`                | Splits the string into a list based on a delimiter.                             | `"hello world".split()` → `['hello', 'world']`                             |
|                          | `join()`                 | Joins elements of an iterable into a single string.                             | `" ".join(['hello', 'world'])` → `"hello world"`                           |
|                          | `replace()`              | Replaces a substring with another substring.                                    | `"hello".replace("h", "j")` → `"jello"`                                    |
|                          | `find()`                 | Returns the index of the first occurrence of a substring.                       | `"hello".find("e")` → `1`                                                  |
| **list**                 | `append()`               | Adds an element to the end of the list.                                         | `lst = [1, 2]; lst.append(3); print(lst)` → `[1, 2, 3]`                    |
|                          | `extend()`               | Adds elements from an iterable to the end of the list.                          | `lst = [1, 2]; lst.extend([3, 4]); print(lst)` → `[1, 2, 3, 4]`            |
|                          | `insert()`               | Inserts an element at a specific index.                                         | `lst = [1, 2]; lst.insert(1, 1.5); print(lst)` → `[1, 1.5, 2]`             |
|                          | `remove()`               | Removes the first occurrence of a value.                                        | `lst = [1, 2, 3]; lst.remove(2); print(lst)` → `[1, 3]`                    |
|                          | `pop()`                  | Removes and returns the element at a specific index.                            | `lst = [1, 2, 3]; lst.pop(1); print(lst)` → `2` (list becomes `[1, 3]`)    |
|                          | `index()`                | Returns the index of the first occurrence of a value.                           | `lst = [1, 2, 3]; lst.index(2)` → `1`                                      |
|                          | `count()`                | Returns the number of occurrences of a value.                                   | `lst = [1, 2, 2, 3]; lst.count(2)` → `2`                                   |
|                          | `sort()`                 | Sorts the list in place.                                                        | `lst = [3, 1, 2]; lst.sort(); print(lst)` → `[1, 2, 3]`                    |
|                          | `reverse()`              | Reverses the list in place.                                                     | `lst = [1, 2, 3]; lst.reverse(); print(lst)` → `[3, 2, 1]`                 |
| **tuple**                | `index()`                | Returns the index of the first occurrence of a value.                           | `tup = (1, 2, 3); tup.index(2)` → `1`                                      |
|                          | `count()`                | Returns the number of occurrences of a value.                                   | `tup = (1, 2, 2, 3); tup.count(2)` → `2`                                   |
| **set**                  | `add()`                  | Adds an element to the set.                                                     | `s = {1, 2}; s.add(3); print(s)` → `{1, 2, 3}`                             |
|                          | `remove()`               | Removes an element from the set. Raises an error if not found.                  | `s = {1, 2}; s.remove(2); print(s)` → `{1}`                                |
|                          | `discard()`              | Removes an element from the set if it exists.                                   | `s = {1, 2}; s.discard(2); print(s)` → `{1}`                               |
|                          | `union()`                | Returns the union of two sets.                                                  | `{1, 2}.union({2, 3})` → `{1, 2, 3}`                                       |
|                          | `intersection()`         | Returns the intersection of two sets.                                           | `{1, 2}.intersection({2, 3})` → `{2}`                                      |
|                          | `difference()`           | Returns the difference between two sets.                                        | `{1, 2}.difference({2, 3})` → `{1}`                                        |
|                          | `symmetric_difference()` | Returns the symmetric difference between two sets.                              | `{1, 2}.symmetric_difference({2, 3})` → `{1, 3}`                           |
| **dict**                 | `keys()`                 | Returns a view of the dictionary's keys.                                        | `d = {'a': 1, 'b': 2}; d.keys()` → `dict_keys(['a', 'b'])`                 |
|                          | `values()`               | Returns a view of the dictionary's values.                                      | `d = {'a': 1, 'b': 2}; d.values()` → `dict_values([1, 2])`                 |
|                          | `items()`                | Returns a view of the dictionary's key-value pairs.                             | `d = {'a': 1, 'b': 2}; d.items()` → `dict_items([('a', 1), ('b', 2)])`     |
|                          | `get()`                  | Returns the value for a key, or a default if the key is not found.              | `d = {'a': 1}; d.get('a', 0)` → `1`                                        |
|                          | `pop()`                  | Removes and returns the value for a key.                                        | `d = {'a': 1}; d.pop('a'); print(d)` → `1` (d becomes `{}`)                |
|                          | `update()`               | Updates the dictionary with key-value pairs from another dictionary or iterable.| `d = {'a': 1}; d.update({'b': 2}); print(d)` → `{'a': 1, 'b': 2}`          |
|                          | `clear()`                | Removes all items from the dictionary.                                          | `d = {'a': 1}; d.clear(); print(d)` → `{}`                                 |

### Key Fixes:
1. **List Examples**: Added `print(lst)` to show the modified list after operations like `append`, `extend`, `insert`, `remove`, `pop`, `sort`, and `reverse`.
2. **Set Examples**: Added `print(s)` to show the modified set after operations like `add`, `remove`, and `discard`.
3. **Dictionary Examples**: Added `print(d)` to show the modified dictionary after operations like `pop`, `update`, and `clear`.

This should now be accurate and ready for use! Let me know if you need further clarification or additional examples.